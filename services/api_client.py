import requests
import random
import json
import os
from datetime import datetime, timedelta
from urllib.parse import quote

CACHE_FILE = "storage/fruit_cache.json"
CACHE_EXPIRE_HOURS = 24

def get_fruit_fact(fruit=None):
    try:
        fruits = get_cached_fruits()
        if not fruits:
            fruits = fetch_all_fruits()
        
        if not fruit:
            fruit = random.choice(fruits)["name"]
        
        fruit_data = next((f for f in fruits if f["name"].lower() == fruit.lower()), None)
        if fruit_data:
            return format_fruit_info(fruit_data)
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä—É–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

def get_fruit_info(fruit_name):
    try:
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        fruits = get_cached_fruits()
        if fruits:
            fruit = next((f for f in fruits if f["name"].lower() == fruit_name.lower()), None)
            if fruit:
                return fruit
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ
        response = requests.get(f"https://www.fruityvice.com/api/fruit/{quote(fruit_name)}", timeout=5)
        response.raise_for_status()
        return response.json()
    except Exception:
        return {"name": fruit_name, "nutritions": {"calories": "N/A", "sugar": "N/A"}}

def fetch_all_fruits():
    try:
        response = requests.get("https://www.fruityvice.com/api/fruit/all", timeout=5)
        response.raise_for_status()
        fruits = response.json()
        save_fruits_cache(fruits)
        return fruits
    except Exception:
        return []

def get_cached_fruits():
    if not os.path.exists(CACHE_FILE):
        return None
        
    cache_time = datetime.fromtimestamp(os.path.getmtime(CACHE_FILE))
    if datetime.now() - cache_time > timedelta(hours=CACHE_EXPIRE_HOURS):
        return None
        
    with open(CACHE_FILE, "r") as f:
        return json.load(f)

def save_fruits_cache(fruits):
    os.makedirs("storage", exist_ok=True)
    with open(CACHE_FILE, "w") as f:
        json.dump(fruits, f)

def format_fruit_info(fruit):
    name = fruit.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ—Ä—É–∫—Ç")
    nutrition = fruit.get("nutritions", {})

    calories = nutrition.get("calories", "N/A")
    sugar = nutrition.get("sugar", "N/A")
    fat = nutrition.get("fat", "N/A")
    carbohydrates = nutrition.get("carbohydrates", "N/A")
    protein = nutrition.get("protein", "N/A")

    fact_parts = [
        f"üçé {name} ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä—É–∫—Ç–µ:",
        "",
        "üìä –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100 –≥:",
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª",
        f"‚Ä¢ –°–∞—Ö–∞—Ä: {sugar} –≥",
        f"‚Ä¢ –ñ–∏—Ä—ã: {fat} –≥",
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbohydrates} –≥",
        f"‚Ä¢ –ë–µ–ª–∫–∏: {protein} –≥",
    ]

    # –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
    if isinstance(calories, (int, float)):
        if calories < 40:
            fact_parts.append("üîπ –ù–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π —Ñ—Ä—É–∫—Ç")
        elif calories > 80:
            fact_parts.append("üîπ –í—ã—Å–æ–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π —Ñ—Ä—É–∫—Ç")
        else:
            fact_parts.append("üîπ –°—Ä–µ–¥–Ω—è—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å")

    # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–∞—Ö–∞—Ä–∞
    if isinstance(sugar, (int, float)):
        if sugar > 15:
            fact_parts.append("‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞")
        elif sugar < 5:
            fact_parts.append("‚úÖ –ù–∏–∑–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞")

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –±–µ–ª–∫—É
    if isinstance(protein, (int, float)) and protein > 1:
        fact_parts.append("üí™ –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–∞ –¥–ª—è —Ñ—Ä—É–∫—Ç–∞")

    # –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —Å—Ç—Ä–æ–∫–∞
    fact_parts.append("üçΩÔ∏è –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∑–¥–æ—Ä–æ–≤—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º!")

    return "\n".join(fact_parts)