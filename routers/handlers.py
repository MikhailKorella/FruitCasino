from telebot.types import CallbackQuery, Message, ReplyKeyboardRemove
from keyboards.inline import build_spin_keyboard, build_mode_switch_keyboard, build_topup_keyboard
from keyboards.reply import main_keyboard
from utils.slot_machine import spin_slots
from services.google_sheets import GoogleSheetsService
from services.api_client import get_fruit_fact
from states.delivery_states import DeliveryStates
from utils.logger import logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Sheets
google_sheets = GoogleSheetsService()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –∏ –∏—Ö —ç–º–æ–¥–∑–∏
FRUITS = {
    "üçå": "–ë–∞–Ω–∞–Ω",
    "üçë": "–ü–µ—Ä—Å–∏–∫", 
    "üçã": "–õ–∏–º–æ–Ω",
    "üçê": "–ì—Ä—É—à—É",
    "üçè": "–ó–µ–ª–µ–Ω–æ–µ —è–±–ª–æ–∫–æ",
    "üçç": "–ê–Ω–∞–Ω–∞—Å",
    "ü•ù": "–ö–∏–≤–∏",
    "ü•≠": "–ú–∞–Ω–≥–æ",
    "üçÖ": "–ü–æ–º–∏–¥–æ—Ä",
    "üç∫": "–ü–∏–≤–æ"
}

def register(bot):
    @bot.callback_query_handler(func=lambda call: call.data.startswith("mode_"))
    def mode_selected(call: CallbackQuery):
        user_id = call.from_user.id
        mode = call.data.split("_")[1]
        
        users[user_id] = {
            "mode": mode,
            "balance": 0 if mode == "paid" else 10,  # –í –ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
            "wins": 0,
            "total_spins": 0,
            "pending_delivery": None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–∏–≥—Ä–∞–Ω–Ω–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞
        }
        
        bot.edit_message_text(
            f"–†–µ–∂–∏–º '{'–ü–ª–∞—Ç–Ω—ã–π' if mode == 'paid' else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {users[user_id]['balance']} –∫—Ä—É—Ç–æ–∫",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=None
        )
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

    def process_spin(user_id, chat_id, message_id=None):
        user = users.get(user_id)
        if not user:
            if message_id:
                bot.answer_callback_query(user_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã —á–µ—Ä–µ–∑ /start")
            else:
                bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã —á–µ—Ä–µ–∑ /start")
            return

        if user['balance'] <= 0:
            if user['mode'] == "paid":
                markup = build_mode_switch_keyboard()
                if message_id:
                    try:
                        bot.edit_message_text(
                            "üí∞ –í –ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏.\n"
                            "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫—Ä—É—Ç–∫–∞–º–∏?",
                            chat_id,
                            message_id,
                            reply_markup=markup
                        )
                    except Exception as e:
                        logger.error(f"Error editing message: {e}")
                        bot.answer_callback_query(user_id, "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
                else:
                    bot.send_message(
                        chat_id,
                        "üí∞ –í –ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏.\n"
                        "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫—Ä—É—Ç–∫–∞–º–∏?",
                        reply_markup=markup
                    )
            else:
                if message_id:
                    try:
                        bot.edit_message_text(
                            "‚ùå –í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0",
                            chat_id,
                            message_id,
                            reply_markup=build_topup_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                        )
                    except Exception as e:
                        logger.error(f"Error editing message: {e}")
                        bot.answer_callback_query(user_id, "–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0. –í–≤–µ–¥–∏—Ç–µ /topup", show_alert=True)
                else:
                    bot.send_message(chat_id, "‚ùå –í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0. –í–≤–µ–¥–∏—Ç–µ /topup –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
            return

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è
        symbols, win_fruit = spin_slots()
        result = " ".join(symbols)
        user['total_spins'] += 1
        user['balance'] -= 1
        
        if win_fruit:
            user['wins'] += 1
            user['pending_delivery'] = win_fruit
            response = (
                f"{result}\n"
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {FRUITS.get(win_fruit, win_fruit)}!\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ (–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏–∑ –Ω–µ –ø—Ä–∏–µ–¥–µ—Ç), –æ—Ñ–æ—Ä–º–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delivery"
            )
        else:
            response = f"{result}\nüò¢ –ù–µ –ø–æ–≤–µ–∑–ª–æ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\nüí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}"

        if message_id:
            try:
                bot.edit_message_text(
                    response,
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=build_spin_keyboard()
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                bot.answer_callback_query(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        else:
            bot.send_message(chat_id, response, reply_markup=build_spin_keyboard())

    @bot.message_handler(commands=['delivery'])
    def start_delivery(msg: Message):
        user = users.get(msg.from_user.id)
        if not user:
            bot.send_message(msg.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã —á–µ—Ä–µ–∑ /start")
            return
            
        if not user.get('pending_delivery'):
            bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏")
            return
            
        if not google_sheets.connected:
            bot.send_message(msg.chat.id, "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        bot.send_message(
            msg.chat.id,
            "üöö –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):"
        )
        bot.set_state(msg.from_user.id, DeliveryStates.address, msg.chat.id)

    @bot.message_handler(state=DeliveryStates.address)
    def process_address(msg: Message):
        bot.add_data(msg.from_user.id, address=msg.text)
        bot.send_message(
            msg.chat.id,
            "üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
        )
        bot.set_state(msg.from_user.id, DeliveryStates.phone, msg.chat.id)

    @bot.message_handler(state=DeliveryStates.phone)
    def process_phone(msg: Message):
        user = users.get(msg.from_user.id)
        if not user or not user.get('pending_delivery'):
            bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–∏–≥—Ä—ã—à–µ")
            bot.delete_state(msg.from_user.id, msg.chat.id)
            return
   
        with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
            delivery_data = {
                'id': msg.from_user.id,
                'username': msg.from_user.username,
                'first_name': msg.from_user.first_name,
                'fruit': user['pending_delivery'],
                'address': data.get('address'),
                'phone': msg.text
            }
            
            success = google_sheets.save_delivery_info(delivery_data, user.get("pending_delivery"))
            
            if success:
                response = (
                    "‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
                    f"üçè –§—Ä—É–∫—Ç: {FRUITS.get(user['pending_delivery'], user['pending_delivery'])}\n"
                    f"üè† –ê–¥—Ä–µ—Å: {data.get('address')}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {msg.text}\n\n"
                    "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                )
                user['pending_delivery'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â—É—é –¥–æ—Å—Ç–∞–≤–∫—É
            else:
                response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            bot.send_message(msg.chat.id, response)
            bot.delete_state(msg.from_user.id, msg.chat.id)

    @bot.message_handler(func=lambda msg: msg.text == "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã" or msg.text == "/spin")
    def spin_handler(msg: Message):
        process_spin(msg.from_user.id, msg.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data == "spin_again")
    def spin_again_handler(call):
        process_spin(call.from_user.id, call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "switch_to_free")
    def switch_to_free_handler(call: CallbackQuery):
        user_id = call.from_user.id
        users[user_id] = {
            "mode": "free",
            "balance": float('inf'),
            "wins": 0,
            "total_spins": 0,
            "pending_delivery": None
        }
        
        bot.edit_message_text(
            "‚úÖ –í—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º!\n"
            "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫!",
            call.message.chat.id,
            call.message.message_id
        )
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

    @bot.message_handler(func=lambda msg: msg.text == "üí∞ –ë–∞–ª–∞–Ω—Å" or msg.text == "/balance")
    def balance_handler(msg: Message):
        user = users.get(msg.from_user.id)
        if not user:
            bot.send_message(msg.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã —á–µ—Ä–µ–∑ /start")
            return
            
        balance_text = (
            f"üìä –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
            f"‚Ä¢ –†–µ–∂–∏–º: {'–ü–ª–∞—Ç–Ω—ã–π' if user['mode'] == 'paid' else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}\n"
            f"‚Ä¢ –ö—Ä—É—Ç–æ–∫: {'‚àû' if user['balance'] == float('inf') else user['balance']}\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–µ–π: {user['wins']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫—Ä—É—Ç–æ–∫: {user['total_spins']}"
        )
        
        if user.get('pending_delivery'):
            balance_text += f"\n\nüçè –û–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {FRUITS.get(user['pending_delivery'], user['pending_delivery'])}"
        
        bot.send_message(msg.chat.id, balance_text)

    @bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è –§–∞–∫—Ç –æ —Ñ—Ä—É–∫—Ç–µ" or msg.text == "/fact")
    def fact_handler(msg: Message):
        fact = get_fruit_fact()
        bot.send_message(msg.chat.id, fact)
    
    @bot.message_handler(func=lambda msg: msg.text == "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å" or msg.text == "/topup")
    def topup_handler(msg: Message):
        user = users.get(msg.from_user.id)
        if not user:
            bot.send_message(msg.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã —á–µ—Ä–µ–∑ /start")
            return
            
        if user['mode'] == "paid":
            markup = build_mode_switch_keyboard()
            bot.send_message(
                msg.chat.id,
                "üí∞ –í –ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º?",
                reply_markup=markup
            )
            return
            
        bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_topup_amount)

    @bot.message_handler(func=lambda msg: msg.text == "üÜò –ü–æ–º–æ—â—å" or msg.text == "/help")
    def help_handler(msg: Message):
        help_text = (
            "üçé –§—Ä—É–∫—Ç–æ–≤–æ–µ –ö–∞–∑–∏–Ω–æ - –ü–æ–º–æ—â—å üçé\n"
            "/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
            "/spin - –∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã\n"
            "/fact - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ —Ñ—Ä—É–∫—Ç–∞—Ö\n"
            "/balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"
        )
        bot.send_message(msg.chat.id, help_text)
    
    @bot.message_handler(func=lambda msg: msg.text == "üìù –ü—Ä–∞–≤–∏–ª–∞" or msg.text == "/rules")
    def rules_handler(msg: Message):
        rules_text = "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n" \
        "–ó–∞ –æ–¥–Ω—É –∫—Ä—É—Ç–∫—É –≤–∞–º –≤—ã–ø–∞–¥–∞–µ—Ç —Ç—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç–∞. –ß—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å —Ñ—Ä—É–∫—Ç, –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–ø–∞–ª–∞ —Ç–µ–ª–µ–∂–∫–∞, –∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –∏–ª–∏ —Ç—Ä–µ—Ç—å–µ–π - —Ñ—Ä—É–∫—Ç.\n" \
        "–í—ã–ø–∞–≤—à–∏–π —Ñ—Ä—É–∫—Ç –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏, –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ–≥–æ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ –¥–æ–º–∞ (–µ—Å–ª–∏ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º)"
        bot.send_message(msg.chat.id, rules_text)

    @bot.callback_query_handler(func=lambda call: call.data == "topup_balance")
    def topup_callback_handler(call: CallbackQuery):
        user = users.get(call.from_user.id)
        if not user:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã —á–µ—Ä–µ–∑ /start")
            return
        
        if user['mode'] == "paid":
            bot.answer_callback_query(call.id, "–í –ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return
        
        bot.answer_callback_query(call.id)
        bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
        )
        bot.register_next_step_handler(call.message, process_topup_amount)

    def process_topup_amount(msg: Message):
        try:
            amount = int(msg.text)
            if amount <= 0:
                bot.send_message(msg.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
                return
                
            user = users.get(msg.from_user.id)
            if not user:
                bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
                
            user['balance'] += amount
            bot.send_message(
                msg.chat.id,
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –∫—Ä—É—Ç–æ–∫!\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']}",
                reply_markup=build_spin_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞"
            )
        except ValueError:
            bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=main_keyboard())